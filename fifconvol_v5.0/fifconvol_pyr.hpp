#include <stdlib.h>
#include <cutil_inline.h>

const float ker_h_r[25]={-0.000821094167027158,	-0.0107305198238270,	-0.0252753217414076,	-0.0107305198238270,	-0.000821094167027159,
			 -0.0107305198238270,	-0.140232460920326,	-0.330312102912319,	-0.140232460920326,	-0.0107305198238270,
			  0.0234536821122993,	0.306505892934251,	0.721962699546806,	0.306505892934251,	0.0234536821122993,
			 -0.0107305198238270,	-0.140232460920326,	-0.330312102912319,	-0.140232460920326,	-0.0107305198238270,
			 -0.000821094167027159,	-0.0107305198238270,	-0.0252753217414076,	-0.0107305198238270,	-0.000821094167027158};

const float ker_h_i[25]={-0.000913951563929575,	-0.0119440324491303,	-0.0281337034922800,	-0.0119440324491303,	-0.000913951563929575,
			  0.0119440324491303,	0.156091325597720,	0.367667041326815,	0.156091325597720,	0.0119440324491303,
			  8.33231614645620e-18,	5.44456940375418e-17,	0,	-5.44456940375418e-17,	-8.33231614645620e-18,
			 -0.0119440324491303,	-0.156091325597720,	-0.367667041326815,	-0.156091325597720,	-0.0119440324491303,
			  0.000913951563929575,	0.0119440324491303,	0.0281337034922800,	0.0119440324491303,	0.000913951563929575};

const float ker_d_r[25]={0.000694510344819919,	-0.00750676476159891,	-0.0409953826795677,	-0.00259730591246642,	0.000761916377355903,
			-0.00750676476159889,	-0.227450453780301,	-0.0799515393418670,	0.130125645635702,	-0.00259730591246644,
			-0.0409953826795677,	-0.0799515393418671,	0.721962699546806,	-0.0799515393418671,	-0.0409953826795677,
			-0.00259730591246644,	0.130125645635702,	-0.0799515393418670,	-0.227450453780301,	-0.00750676476159889,
			0.000761916377355903,	-0.00259730591246642,	-0.0409953826795677,	-0.00750676476159891,	0.000694510344819919};

const float ker_d_i[25]={-0.000371118633939442,	-0.0132939323486906,	0.00580542989519224,	0.0137361655954260,	-4.90785120868371e-19,
			-0.0132939323486906,	0.0322096679611999,	0.422833359265801,	-4.19099343572458e-17,	-0.0137361655954260,
			0.00580542989519222,	0.422833359265801,	0,	-0.422833359265801,	-0.00580542989519222,
			0.0137361655954260,	4.19099343572458e-17,	-0.422833359265801,	-0.0322096679611999,	0.0132939323486906,
			4.90785120868371e-19,	-0.0137361655954260,	-0.00580542989519224,	0.0132939323486906,	0.000371118633939442};

const float ker_v_r[25]={-0.000821094167027158,-0.0107305198238270,	0.0234536821122993,	-0.0107305198238270,	-0.000821094167027158,
			-0.0107305198238270,	-0.140232460920326,	0.306505892934251,	-0.140232460920326,	-0.0107305198238270,
			-0.0252753217414076,	-0.330312102912319,	0.721962699546806,	-0.330312102912319,	-0.0252753217414076,
			-0.0107305198238270,	-0.140232460920326,	0.306505892934251,	-0.140232460920326,	-0.0107305198238270,
			-0.000821094167027158,	-0.0107305198238270,	0.0234536821122993,	-0.0107305198238270,	-0.000821094167027158};

const float ker_v_i[25]={-0.000913951563929575,0.0119440324491303,	0,	-0.0119440324491303,	0.000913951563929575,
			-0.0119440324491303,	0.156091325597720,	0,	-0.156091325597720,	0.0119440324491303,
			-0.0281337034922800,	0.367667041326815,	0,	-0.367667041326815,	0.0281337034922800,
			-0.0119440324491303,	0.156091325597720,	0,	-0.156091325597720,	0.0119440324491303,
			-0.000913951563929575,	0.0119440324491303,	0,	-0.0119440324491303,	0.000913951563929575};

const float ker_ld_r[25]={0.000761916377355903,-0.00259730591246642,	-0.0409953826795677,	-0.00750676476159891,	0.000694510344819919,
			-0.00259730591246644,	0.130125645635702,	-0.0799515393418670,	-0.227450453780301,	-0.00750676476159889,
			-0.0409953826795677,	-0.0799515393418671,	0.721962699546806,	-0.0799515393418671,	-0.0409953826795677,
			-0.00750676476159889,	-0.227450453780301,	-0.0799515393418670,	0.130125645635702,	-0.00259730591246644,
			0.000694510344819919,	-0.00750676476159891,	-0.0409953826795677,	-0.00259730591246642,	0.000761916377355903};

const float ker_ld_i[25]={4.90785120868371e-19,-0.0137361655954260,	-0.00580542989519224,	0.0132939323486906,	0.000371118633939442,
			  0.0137361655954260,	4.19099343572458e-17,	-0.422833359265801,	-0.0322096679611999,	0.0132939323486906,
			  0.00580542989519222,	0.422833359265801,	0,	-0.422833359265801,	-0.00580542989519222,
			 -0.0132939323486906,	0.0322096679611999,	0.422833359265801,	-4.19099343572458e-17,	-0.0137361655954260,
			 -0.000371118633939442,-0.0132939323486906,	0.00580542989519224,	0.0137361655954260,	-4.90785120868371e-19};
const int  BLOCK_DIM = 32;//32 for new cuda cores
const int  BLOCK_HEI = 8;
const float PI = 3.14159265358979323846f;
class fifconvol_pyr
{
//The image width & height
int d_w;
int d_h;
int p_w;
int p_h;
cudaChannelFormatDesc U8Tex;
cudaChannelFormatDesc F32Tex;
cudaArray *d_input;
cudaArray *d_inputf;
float *d_resz;
short int * d_RP;
unsigned char *host_pad;
float *d_ene;//4-orientations put together for each pixel
dim3 grid;
dim3 threads;
inline int iDivUp(int a, int b){
    return (a % b != 0) ? (a / b + 1) : (a / b);
}
inline int iAlignUp(int a, int b){
    return (a % b != 0) ?  (a - a % b + b) : a;
}
public:
	fifconvol_pyr(unsigned int w, unsigned int h);
	~fifconvol_pyr();
	void convol_RP5(const unsigned char* h_input, short int* RP_out);
	void convol_RP5_d(short int* RP_out, int ori_width, int ori_height);
	void convol_ene_d(float* ene_out, int ori_width, int ori_height);
	void convol_ene_d_thr(float* ene_out, int ori_width, int ori_height, float beta);
	void bind_input(const unsigned char* h_input);
	void pad_onhost(const unsigned char* h_input);
	void get_padsz(int& w, int& h);
};
